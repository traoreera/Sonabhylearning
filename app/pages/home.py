
from app.compoments import Layout, Controls, NavBar
from .css import login_
from fasthtml.common import *
from ..compoments.base import BaseHtml 

class DashBord(Layout, Controls, NavBar):
    
    def __init__(self):
        super().__init__()
        
        self.html = BaseHtml(
            head=[
                Link(rel="stylesheet", href='../css/style.css'),
                Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
                Script(src='https://cdn.jsdelivr.net/npm/chart.js'),
                
            ],
            body=[
                self.nav(),
                H1("R√©sultats des Mod√®les"),
                Div(self.modeldiv('SGD Regretions LLM','1'), 
                    self.modeldiv('Lineare Regretions LLM','2'), 
                    self.modeldiv('Keras Multi Feature','3'), 
                    self.modeldiv('Keras Neural Network','4')
                    , cls='modelContainer'),
                self.jsContent()                
            ]

        )
    
    
    def modeldiv(self, name:str,canvasId:str):
        
        return Div(
            H2(f"{name}"),
            P(Strong(f"Date d'estimation : "),"2025-05-16", id=f"date{canvasId}"),
            P(Strong(f"Erreur pr√©dite : "),"1.5 g", id=f"error{canvasId}"),
            P(Strong(f"Tol√©rance : "),"2.0 g", id=f"tolerance{canvasId}"),
            Canvas(id=f"chart{canvasId}"),
        )
    
    def jsContent(self):
        return Script(src='../js/dashbord.js')

    def page(self):
        return self.html.render()


def Index():
    return Html(
    Head(
        Meta(charset='UTF-8'),
        Meta(name='viewport', content='width=device-width, initial-scale=1.0'),
        Title('Projet de Pr√©diction de D√©rive de Poids'),
        Link(rel='stylesheet', href='https://unpkg.com/@picocss/pico@1.5.10/css/pico.min.css'),
        Style('body { padding: 2rem; }\r\n        pre { background: #f4f4f4; padding: 1rem; overflow-x: auto; }\r\n        code { font-family: monospace; color: #d63384; }\r\n        .badge img { vertical-align: middle; }')
    ),
    Body(
        Main(
            H1('üéØ Projet de Pr√©diction de D√©rive de Poids', id='projet-de-prediction-de-derive-de-poids'),
            Br(),
            H2('go to dashbord ',A(href='/dashbord')),
            P(
                A(
                    Img(alt='Python', src='https://img.shields.io/badge/python-3.11%2B-blue'),
                    href='https://www.python.org/'
                ),
                A(
                    Img(alt='License: MIT', src='https://img.shields.io/badge/license-MIT-green.svg'),
                    href='./LICENCE'
                ),
                A(
                    Img(alt='FastAPI', src='https://img.shields.io/badge/FastAPI-üöÄ-green'),
                    href='https://fastapi.tiangolo.com/'
                ),
                A(
                    Img(alt='Made with TensorFlow', src='https://img.shields.io/badge/Made%20with-TensorFlow-orange'),
                    href='https://www.tensorflow.org/'
                ),
                A(
                    Img(alt='Made with Keras', src='https://img.shields.io/badge/Made%20with-Keras-orange'),
                    href='https://keras.io/'
                ),
                A(
                    Img(alt='Made with scikit-learn', src='https://img.shields.io/badge/Made%20with-scikit-learn-orange'),
                    href='https://scikit-learn.org/'
                ),
                A(
                    Img(alt='Made with uvicorn', src='https://img.shields.io/badge/Made%20with-uvicorn-orange'),
                    href='https://www.uvicorn.org/'
                ),
                A(
                    Img(alt='Chart.js', src='https://img.shields.io/badge/Chart.js-üìä-blueviolet'),
                    href='https://www.chartjs.org/'
                ),
                A(
                    Img(alt='Status', src='https://img.shields.io/badge/status-en%20cours-yellow'),
                    href=''
                ),
                Br(),
                'Ce projet vise √†',
                Strong('pr√©dire la d√©rive de poids'),
                '√† l‚Äôaide de mod√®les d‚Äôapprentissage automatique, et √†',
                Strong('visualiser dynamiquement'),
                'les r√©sultats via un dashboard web.'
            ),
            Hr(),
            H2('‚öôÔ∏è Technologies utilis√©es', id='technologies-utilisees'),
            H3('Backend', id='backend'),
            Ul(
                Li(
                    Strong('Python 3.11+')
                ),
                Li(
                    Strong('FastAPI (fasthtml)'),
                    '‚Äì Cr√©ation rapide d‚ÄôAPI'
                ),
                Li(
                    Strong('SQLAlchemy'),
                    '‚Äì ORM pour manipuler la base de donn√©es'
                ),
                Li(
                    Strong('Pydantic'),
                    '‚Äì Validation des donn√©es entrantes/sortantes'
                ),
                Li(
                    Strong('TensorFlow / Keras'),
                    '‚Äì R√©seaux de neurones pour la pr√©diction'
                ),
                Li(
                    Strong('scikit-learn'),
                    '‚Äì R√©gression lin√©aire et autres mod√®les'
                ),
                Li(
                    Strong('uvicorn'),
                    '‚Äì Serveur ASGI ultra rapide'
                )
            ),
            H3('Frontend', id='frontend'),
            Ul(
                Li(
                    Strong('HTML / CSS / JavaScript')
                ),
                Li(
                    Strong('Chart.js'),
                    '‚Äì Visualisation des erreurs pr√©dictives'
                ),
                Li(
                    Strong('Fetch API'),
                    '‚Äì Requ√™tes AJAX r√©guli√®res pour actualiser les graphiques'
                )
            ),
            Hr(),
            H2('üöÄ Lancement du projet', id='lancement-du-projet'),
            H3('1. Cloner le d√©p√¥t', id='1-cloner-le-depot'),
            Div(
                Pre(
                    Span(),
                    Code(
                        'git',
                        Span(cls='w'),
                        'clone',
                        Span(cls='w'),
                        'https://github.com/mon-utilisateur/poids-drift-project.git',
                        Span('cd', cls='nb'),
                        Span(cls='w'),
                        'poids-drift-project'
                    )
                ),
                cls='codehilite'
            ),
            H3('2. Installer les d√©pendances', id='2-installer-les-dependances'),
            Div(
                Pre(
                    Span(),
                    Code(
                        'pip',
                        Span(cls='w'),
                        'install',
                        Span(cls='w'),
                        '-r',
                        Span(cls='w'),
                        'requirements.txt'
                    )
                ),
                cls='codehilite'
            ),
            H3('3. Lancer le serveur', id='3-lancer-le-serveur'),
            Div(
                Pre(
                    Span(),
                    Code(
                        'uvicorn',
                        Span(cls='w'),
                        'main:app',
                        Span(cls='w'),
                        '--reload'
                    )
                ),
                cls='codehilite'
            ),
            H3('4. Acc√©der au dashboard', id='4-acceder-au-dashboard'),
            P('Ouvrir dans le navigateur :'),
            Div(
                Pre(
                    Span(),
                    Code('http://localhost:8000/dashboard')
                ),
                cls='codehilite'
            ),
            Hr(),
            H2('üîÑ Fonctionnement', id='fonctionnement'),
            Ol(
                Li('L‚Äôutilisateur soumet un poids r√©el, un poids mesur√© et une tol√©rance.'),
                Li('Plusieurs mod√®les (ML, Deep Learning) calculent les erreurs de pr√©diction.'),
                Li('Les r√©sultats sont stock√©s en base de donn√©es.'),
                Li(
                    'Le frontend (Chart.js) interroge les API toutes les',
                    Strong('6 secondes'),
                    ':'
                )
            ),
            Div(
                Pre(
                    Span(),
                    Code('/models/model1/\r\n/models/model2/\r\n/models/model3/\r\n/models/model4/')
                ),
                cls='codehilite'
            ),
            P('Chacune retourne :'),
            Div(
                Pre(
                    Span(),
                    Code(
                        Span('{', cls='p'),
                        Span(cls='w'),
                        Span('"error"', cls='nt'),
                        Span(':', cls='p'),
                        Span(cls='w'),
                        Span('[', cls='p'),
                        Span('1.2', cls='mf'),
                        Span(',', cls='p'),
                        Span(cls='w'),
                        Span('1.3', cls='mf'),
                        Span(',', cls='p'),
                        Span(cls='w'),
                        Span('1.1', cls='mf'),
                        Span(',', cls='p'),
                        Span(cls='w'),
                        Span('...', cls='err'),
                        Span('],', cls='p'),
                        Span(cls='w'),
                        Span('"data"', cls='nt'),
                        Span(':', cls='p'),
                        Span(cls='w'),
                        Span('[', cls='p'),
                        Span('1.5', cls='mf'),
                        Span(',', cls='p'),
                        Span(cls='w'),
                        Span('1.6', cls='mf'),
                        Span(',', cls='p'),
                        Span(cls='w'),
                        Span('1.8', cls='mf'),
                        Span(',', cls='p'),
                        Span(cls='w'),
                        Span('...', cls='err'),
                        Span(']', cls='p'),
                        Span('}', cls='p')
                    )
                ),
                cls='codehilite'
            ),
            Hr(),
            H2('üìä Visualisation (Dashboard)', id='visualisation-dashboard'),
            Ul(
                Li('Chaque graphique repr√©sente un mod√®le.'),
                Li('Les erreurs sont affich√©es mois par mois.'),
                Li(
                    'Les donn√©es sont rafra√Æchies automatiquement toutes les 6 secondes via',
                    Code('fetch()'),
                    '.'
                )
            ),
            Hr(),
            H2('üì¶ Exemple de mod√®le de pr√©diction', id='exemple-de-modele-de-prediction'),
            Div(
                Pre(
                    Span(),
                    Code(
                        Span('from', cls='kn'),
                        Span(cls='w'),
                        Span('keras.models', cls='nn'),
                        Span(cls='w'),
                        Span('import', cls='kn'),
                        Span('Sequential', cls='n'),
                        Span('from', cls='kn'),
                        Span(cls='w'),
                        Span('keras.layers', cls='nn'),
                        Span(cls='w'),
                        Span('import', cls='kn'),
                        Span('Dense', cls='n'),
                        Span('model', cls='n'),
                        Span('=', cls='o'),
                        Span('Sequential', cls='n'),
                        Span('([', cls='p'),
                        Span('Dense', cls='n'),
                        Span('(', cls='p'),
                        Span('64', cls='mi'),
                        Span(',', cls='p'),
                        Span('activation', cls='n'),
                        Span('=', cls='o'),
                        Span("'relu'", cls='s1'),
                        Span(',', cls='p'),
                        Span('input_shape', cls='n'),
                        Span('=', cls='o'),
                        Span('(', cls='p'),
                        Span('3', cls='mi'),
                        Span(',)),', cls='p'),
                        Span('Dense', cls='n'),
                        Span('(', cls='p'),
                        Span('32', cls='mi'),
                        Span(',', cls='p'),
                        Span('activation', cls='n'),
                        Span('=', cls='o'),
                        Span("'relu'", cls='s1'),
                        Span('),', cls='p'),
                        Span('Dense', cls='n'),
                        Span('(', cls='p'),
                        Span('1', cls='mi'),
                        Span(')', cls='p'),
                        Span('])', cls='p'),
                        Span('model', cls='n'),
                        Span('.', cls='o'),
                        Span('compile', cls='n'),
                        Span('(', cls='p'),
                        Span('optimizer', cls='n'),
                        Span('=', cls='o'),
                        Span("'adam'", cls='s1'),
                        Span(',', cls='p'),
                        Span('loss', cls='n'),
                        Span('=', cls='o'),
                        Span("'mse'", cls='s1'),
                        Span(')', cls='p')
                    )
                ),
                cls='codehilite'
            ),
            Hr(),
            H2('‚úÖ Fonctionnalit√©s', id='fonctionnalites'),
            Ul(
                Li('[x] Pr√©diction en temps r√©el de la d√©rive de poids'),
                Li('[x] Sauvegarde automatique des r√©sultats'),
                Li('[x] Dashboard interactif mis √† jour r√©guli√®rement'),
                Li('[x] Support multi-mod√®les'),
                Li('[x] Authentification avec JWT')
            ),
            Hr(),
            H2('üîí S√©curit√©', id='securite'),
            Ul(
                Li('Authentification via tokens JWT'),
                Li('Protection des endpoints sensibles'),
                Li(
                    'Gestion des utilisateurs dans',
                    Code('models/admin.py')
                )
            ),
            Hr(),
            H2('üìö Documentation', id='documentation'),
            P('Les fichiers suivants apportent des d√©tails techniques :'),
            Ul(
                Li(
                    Code('docs/explain1.md'),
                    '‚Äì Description g√©n√©rale du projet',
                    A('[1]', href='./docs/explain1.md')
                ),
                Li(
                    Code('docs/ia.md'),
                    "‚Äì D√©tails sur les mod√®les d'intelligence artificielle utilis√©s",
                    A('[2]', href='./docs/ia.md')
                )
            ),
            Hr(),
            H2('üîß Am√©liorations futures', id='ameliorations-futures'),
            Ul(
                Li("üîê Syst√®me d'utilisateurs avec r√¥les"),
                Li('üßæ Export CSV / Excel / PDF des r√©sultats'),
                Li('üìà Visualisation des performances historiques'),
                Li('üß† Int√©gration de nouveaux mod√®les LLM ou hybrides')
            ),
            Hr(),
            H2('üßë\u200düíª Auteurs', id='auteurs'),
            Ul(
                Li(
                    Strong('üë§ Myriade Technologie')
                ),
                Li(
                    'üìß',
                    A('traoreera@gmail.com', href='mailto:traoreera@gmail.com')
                )
            ),
            Hr(),
            H2('ü™™ Licence', id='licence'),
            P(
                'Ce projet est open-source sous licence',
                Strong('MIT'),
                '.\r\nVoir',
                A(
                    Code('LICENCE.md'),
                    href='./LICENCE'
                ),
                'pour plus d‚Äôinformations.'
            ),
            cls='container'
        )
    ),
    lang='fr'
)


def license():
    
    return Html(
    Head(
        Meta(charset='UTF-8'),
        Meta(name='viewport', content='width=device-width, initial-scale=1.0'),
        Title('Projet de Pr√©diction de D√©rive de Poids'),
        Link(rel='stylesheet', href='https://unpkg.com/@picocss/pico@1.5.10/css/pico.min.css'),
        Style('body { padding: 2rem; }\r\n        pre { background: #f4f4f4; padding: 1rem; overflow-x: auto; }\r\n        code { font-family: monospace; color: #d63384; }\r\n        .badge img { vertical-align: middle; }')
    ),
    Body(
        Main(
            P(
                'Licence MIT Modifi√©e ‚Äì Usage Restreint',
                Br(),
                'Copyright (c) 2025 Myriade Technologie'
            ),
            P('Permission est accord√©e, gratuitement, √† toute personne obtenant une copie du pr√©sent logiciel et des fichiers de documentation associ√©s (le ¬´ Logiciel ¬ª), de l‚Äôutiliser, de le copier, de le modifier et de le distribuer, sous r√©serve des conditions suivantes :'),
            Ol(
                Li(
                    P(
                        Strong('Utilisation personnelle, acad√©mique et non commerciale uniquement.'),
                        'Le Logiciel peut √™tre utilis√© √† des fins personnelles, √©ducatives ou de recherche',
                        Strong('non commerciales'),
                        '.',
                        Br(),
                        'Toute utilisation',
                        Strong('commerciale'),
                        ', y compris la revente, la location ou l‚Äôint√©gration dans un produit commercial, est',
                        Strong('strictement interdite sans autorisation √©crite pr√©alable'),
                        'de Myriade Technologie.'
                    )
                ),
                Li(
                    P(
                        Strong('Interdiction d‚Äôusage militaire ou de surveillance.'),
                        'Le Logiciel ne peut pas √™tre utilis√©, directement ou indirectement, pour des fins militaires, de surveillance massive, de reconnaissance faciale, ou tout syst√®me pouvant porter atteinte aux droits humains fondamentaux.'
                    )
                ),
                Li(
                    P(
                        Strong('Mention obligatoire du copyright.'),
                        'Le pr√©sent avis de droit d‚Äôauteur ainsi que les conditions de licence doivent √™tre inclus dans toutes les copies ou parties substantielles du Logiciel.'
                    )
                ),
                Li(
                    P(
                        Strong('Aucune garantie.'),
                        "Le Logiciel est fourni ¬´ tel quel ¬ª, sans aucune garantie, expresse ou implicite, y compris mais sans s‚Äôy limiter les garanties de qualit√© marchande, d‚Äôad√©quation √† un usage particulier et d‚Äôabsence de contrefa√ßon. En aucun cas les auteurs ou titulaires du droit d‚Äôauteur ne pourront √™tre tenus responsables de toute r√©clamation, dommage ou autre responsabilit√©, que ce soit dans le cadre d‚Äôune action contractuelle, d√©lictuelle ou autre, d√©coulant de, ou en rapport avec, le Logiciel ou l‚Äôutilisation ou d'autres relations avec le Logiciel."
                    )
                )
            ),
            Hr(),
            P(
                'Pour toute demande d‚Äôusage commercial, veuillez contacter :',
                Br(),
                'üìß traoreera@gmail.com'
            ),
            cls='container'
        )
    ),
    lang='fr'
)


def explain():
    return Html(
    Head(
        Meta(charset='UTF-8'),
        Meta(name='viewport', content='width=device-width, initial-scale=1.0'),
        Title('Projet de Pr√©diction de D√©rive de Poids'),
        Link(rel='stylesheet', href='https://unpkg.com/@picocss/pico@1.5.10/css/pico.min.css'),
        Style('body { padding: 2rem; }\r\n        pre { background: #f4f4f4; padding: 1rem; overflow-x: auto; }\r\n        code { font-family: monospace; color: #d63384; }\r\n        .badge img { vertical-align: middle; }')
    ),
    Body(
        Main(
            Ul(
                Li(
                    P(
                        'Saisir',
                        Strong('manuellement'),
                        ':'
                    )
                ),
                Li(
                    P(
                        'le',
                        Strong('poids r√©el de r√©f√©rence'),
                        '(ex: 100 g),'
                    )
                ),
                Li(
                    'le',
                    Strong('poids mesur√© par le capteur'),
                    '(ex: 104.5 g),'
                ),
                Li(
                    'une',
                    Strong('tol√©rance'),
                    '(ex: ¬±2 g),'
                ),
                Li(
                    P('Et que le syst√®me :')
                ),
                Li(
                    P('d√©tecte si l‚Äô√©cart d√©passe la tol√©rance,')
                ),
                Li('suive la d√©rive dans le temps,'),
                Li(
                    Strong('pr√©dise √† quel moment'),
                    "l'erreur d√©passera la tol√©rance (√©ch√©ance estim√©e pour l'√©talonnage)."
                )
            ),
            Hr(),
            H2('‚úÖ Vue d‚Äôensemble du syst√®me :', id='vue-densemble-du-systeme'),
            H3('üì• Donn√©es saisies √† chaque mesure :', id='donnees-saisies-a-chaque-mesure'),
            Table(
                Thead(
                    Tr(
                        Th('Date'),
                        Th('Poids r√©el'),
                        Th('Poids mesur√©'),
                        Th('Tol√©rance (g)')
                    )
                ),
                Tbody(
                    Tr(
                        Td('2025-01-01'),
                        Td('100'),
                        Td('99.8'),
                        Td('2')
                    ),
                    Tr(
                        Td('2025-02-01'),
                        Td('100'),
                        Td('101.1'),
                        Td('2')
                    ),
                    Tr(
                        Td('2025-03-01'),
                        Td('100'),
                        Td('102.8'),
                        Td('2')
                    )
                )
            ),
            H3("üìä Ce que l'app fait :", id='ce-que-lapp-fait'),
            Ul(
                Li(
                    'Calcule',
                    Strong('l‚Äôerreur = |poids mesur√© - poids r√©el|')
                ),
                Li('Compare l‚Äôerreur √† la tol√©rance'),
                Li(
                    'Enregistre une',
                    Strong('alerte si l‚Äôerreur d√©passe la tol√©rance')
                ),
                Li(
                    Strong('Mod√©lise la d√©rive dans le temps')
                ),
                Li(
                    'Pr√©dit',
                    Strong('la date'),
                    '√† laquelle l‚Äôerreur d√©passera la tol√©rance (si ce n‚Äôest pas d√©j√† le cas)'
                )
            ),
            Hr(),
            H2('üß† Exemple de pr√©diction :', id='exemple-de-prediction'),
            Ul(
                Li("Aujourd'hui, l‚Äôerreur est de 1.8 g (ok)"),
                Li(
                    'L‚Äôerreur augmente de',
                    Strong('0.5 g par mois')
                ),
                Li(
                    'La tol√©rance est de 2 g\r\n  ‚Üí Il reste',
                    Strong('0.2 g de marge'),
                    ', soit \\~12 jours avant d√©passement'
                )
            ),
            cls='container'
        )
    ),
    lang='fr'
)


def ia():
    return Html(
    Head(
        Meta(charset='UTF-8'),
        Meta(name='viewport', content='width=device-width, initial-scale=1.0'),
        Title('Projet de Pr√©diction de D√©rive de Poids'),
        Link(rel='stylesheet', href='https://unpkg.com/@picocss/pico@1.5.10/css/pico.min.css'),
        Style('body { padding: 2rem; }\r\n        pre { background: #f4f4f4; padding: 1rem; overflow-x: auto; }\r\n        code { font-family: monospace; color: #d63384; }\r\n        .badge img { vertical-align: middle; }')
    ),
    Body(
        Main(
            P(
                'Dans ce script, il y a',
                Strong('une forme simple d‚Äôintelligence artificielle'),
                ': une',
                Strong('r√©gression lin√©aire'),
                '.'
            ),
            Hr(),
            H3("üìå O√π est le mod√®le d'IA ?", id='ou-est-le-modele-dia'),
            P(
                'La ligne suivante utilise',
                Strong(
                    Code('LinearRegression()')
                ),
                'de',
                Strong('scikit-learn'),
                ':'
            ),
            Div(
                Pre(
                    Span(),
                    Code(
                        Span('model', cls='n'),
                        Span('=', cls='o'),
                        Span('LinearRegression', cls='n'),
                        Span('()', cls='p'),
                        Span('model', cls='n'),
                        Span('.', cls='o'),
                        Span('fit', cls='n'),
                        Span('(', cls='p'),
                        Span('jours', cls='n'),
                        Span(',', cls='p'),
                        Span('erreurs', cls='n'),
                        Span(')', cls='p')
                    )
                ),
                cls='codehilite'
            ),
            P(
                'Ce mod√®le apprend la',
                Strong('relation entre le temps (en jours)'),
                'et',
                Strong('l‚Äôerreur de mesure (en grammes)'),
                '. Il essaie de',
                Strong('pr√©dire'),
                'quand l‚Äôerreur atteindra la',
                Strong('tol√©rance maximale d√©finie'),
                '.'
            ),
            Hr(),
            H3('ü§ñ Pourquoi c‚Äôest une IA ?', id='pourquoi-cest-une-ia'),
            P(
                'M√™me si ce n‚Äôest pas une IA complexe comme un r√©seau de neurones, c‚Äôest un mod√®le',
                Strong('d‚Äôapprentissage supervis√©'),
                ':'
            ),
            Ul(
                Li(
                    Strong("Donn√©es d'entr√©e"),
                    ': la date (convertie en nombre de jours).'
                ),
                Li(
                    Strong('Donn√©es de sortie'),
                    ': l‚Äôerreur (√©cart entre le poids mesur√© et le poids r√©el).'
                ),
                Li(
                    'Le mod√®le',
                    Strong('apprend une tendance'),
                    '(la d√©rive des erreurs).'
                ),
                Li(
                    'Il peut ensuite',
                    Strong('pr√©dire dans le futur'),
                    '(date de d√©passement de tol√©rance).'
                )
            ),
            Hr(),
            H3('üéØ Exemple d‚Äôusage de l‚ÄôIA ici', id='exemple-dusage-de-lia-ici'),
            Blockquote(
                P('Si les erreurs augmentent chaque jour (0.2 kg par exemple), l‚ÄôIA pr√©voit √† quelle date l‚Äôerreur atteindra la limite tol√©r√©e (3000 g ici). C‚Äôest utile dans la maintenance ou le recalibrage d‚Äôun syst√®me.')
            ),
            Hr(),
            cls='container'
        )
    ),
    lang='fr'
)